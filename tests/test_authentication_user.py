import pytest

from base_page.base_user_methods import UserAPI
from base_page.assertions import Assertions
from base_page.base_case import BaseCase


class TestAuthenticationUser:

    def test_login_new_user(self):
        """–¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

        # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = UserAPI.prepare_registration_data()
        response_create = UserAPI.create_user(user_data)

        Assertions.assert_status_code(response_create, 200)

        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response_auth = UserAPI.authenticate_user(user_data['email'], user_data['password'])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª token, cookie –∏ user_id
        assert response_auth['user_id'] is not None, 'The response does not contain "user_id"'
        assert response_auth['token'] is not None, 'The response does not contain "token"'
        assert response_auth['cookies'] is not None, 'The response does not contain "cookie"'

    @pytest.mark.parametrize('email', ['test+example@gmail.com',
                                       ' testexample@gmail.com',
                                       'testexample@gmail.com ',
                                       'test.example@gmail.com',
                                       'test@example@gmail.com',
                                       'testexample@.com'
                                       'testexamplegmail.com',
                                       'TestExample@gmail.com',
                                       '—Ç–µ—Å—Ç@–ø—Ä–∏–º–µ—Ä.—Ä—Ñ',
                                       'ÊµãËØï@example.com',
                                       'üòÄ@example.com',
                                       '" OR "1"="1',
                                       '" OR "1"="1" --',
                                       '"; DROP TABLE users; --',
                                       '<script>alert("XSS")</script>',
                                       '><script>alert("Hacked")</script>',
                                       '<img src=x onerror=alert("XSS")>'
                                       ])
    def test_auth_with_invalid_email(self, email):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ email, –Ω–æ –≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º,
        –∞ —Ç–∞–∫–∂–µ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ XSS-–∞—Ç–∞–∫–æ–π –∏ SQL-–∏–Ω—ä–µ–∫—Ü–∏–µ–π"""

        user_data = {
            'email': email,
            'password': 'qwerty123'
        }

        # POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = UserAPI.login_user(user_data)
        print(response.text)

        error_message = 'Invalid username/password supplied'

        Assertions.assert_status_code(response, 400)
        assert response.text == error_message, \
            f'Expected error message: "{error_message}", but got: "{response.text}"'

    @pytest.mark.parametrize('password', ['Qwerty123',
                                          '!@#$%^&*',
                                          'qwerty123 ',
                                          ' qwerty123',
                                          'qwerty123'*50,
                                          'ÂØÜÁ†Å123',
                                          '–ø–∞—Ä–æ–ª—åüòÄ',
                                          '–ø–∞—Ä–æ–ª—å123',
                                          '" OR "1"="1',
                                          '" OR "1"="1" --',
                                          '"; DROP TABLE users; --',
                                          '<script>alert("XSS")</script>',
                                          '><script>alert("Hacked")</script>',
                                          '<img src=x onerror=alert("XSS")>'
                                          ])
    def test_auth_with_invalid_password(self, password):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏, –Ω–æ –≤–µ—Ä–Ω—ã–º email,
        –∞ —Ç–∞–∫–∂–µ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ XSS-–∞—Ç–∞–∫–æ–π –∏ SQL-–∏–Ω—ä–µ–∫—Ü–∏–µ–π"""

        user_data = {
            'email': 'testexample@gmail.com',
            'password': password
        }

        # POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = UserAPI.login_user(user_data)

        print(response.text)
        error_message = 'Invalid username/password supplied'

        Assertions.assert_status_code(response, 400)
        assert response.text == error_message, \
            f'Expected error message: "{error_message}", but got: "{response.text}"'

    @pytest.mark.parametrize('email, password', [
        ('', 'password123'),
        ('testexample@gmail.com', ''),
        ('', '')
    ])
    def test_auth_with_empty_fields(self, email, password):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏"""

        user_data = {
            'email': email,
            'password': password
        }

        # POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = UserAPI.login_user(user_data)

        error_message = 'Invalid username/password supplied'

        Assertions.assert_status_code(response, 400)
        assert response.text == error_message, \
            f'Expected error message: "{error_message}", but got: "{response.text}"'
